{% set pageTitle = 'Procedural Motion - particles trajectories' %}
{% set tocTitle = 'Procedural Trajectories' %}

{% extends "theme/template/base.html" %}



{% block content %}
== A. Spheres falling under gravity

::[color:gray;]
__Path of the code: [01_procedural/a_bouncing_spheres]__
::

::[height:25px;]::

This code model procedurally the trajectory of a set of spheres falling under gravity.

* - Make sure you can compile and execute the code.
** span::[font-size:85%;] __Note: This is another source code, the procedure to run CMake and parameterization of your IDE has to be redone.__ ::

::[height:25px;]::

* > Observe how are initialized the particles. What are their initial speed ?
 Note how the particles are removed.
* > Change the delay between the emission of a new particle (variable __timer.event_period__).
* > Change the initial speed such that particles have a varying \(y\) component in their initial speed.

::[height:25px;]::

So far, each sphere follows a pure parabola trajectory without taking into account its collision with the plane. 
* > **Implement such collision response in the system** 

::[height:25px;]::

* __Tips__: 
** - Limit the computation to one bounce
** - Compute first the time at which a particle intersects the ground. 
** - Then set the new expression of the trajectory after the bouncing taking into account a small decrease of energy.



videoplay::assets/bouncing.webm[width:550px]

* __Extra__:
** In the previous example, the collision is explicitly displayed by some shadow-looking effect. 
** > How could you model such effect ? 
** > Try to implement it if you have time.


== B. User defined trajectory and billboards

::[color:gray;]
__Path of the code: [01_procedural/b_billboards]__
::
::[height:25px;]::

This code display a scene in loading some external .obj meshes: A cauldron and a spoon
* __Note: The meshes files are stored in the directory assets/. This directory should be accessible from the place where your executable is run.__

::[height:25px;]::

A set of particles (one displayed as sphere, and the other using a semi-transparent textured mapped onto a quad) are emited regularily. <br>
> **Modify the code to model a scene similar to the following one**.

::[height:25px;]::

* __Tips__

** - When dealing with the billboards, you may debug your trajectory in displaying a sphere instead of the semi-transparent texture.
** - The billboards should always face the camera.
** - The uniform value __shading.alpha__ can send an alpha value to the shader to model a global time varying transparency level.


videoplay::assets/cauldron.mp4[width:550px]


{% endblock %}